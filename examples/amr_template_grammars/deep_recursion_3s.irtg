interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation graph: de.up.ling.irtg.algebra.graph.ApplyModifyGraphAlgebra

// COREF doesn't seem to work so I've implemented it as a normal source, in the type system
// Downstairs TPs can only have 3pl DPs (REs)
// upstairs can have 1s, 1p, 2s/p, and 3p subjects, but only 1st and 2nd person can have coref
// 1 and 2 DPs can be full DPs (eg the boys and I)


// ------------------------------ Final states -----------------------------------------------

// ------------ No coreference ----------------------

TP! -> TP_CP(V_CPobj, DP, TP)  [2.0]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)



// ------------ resolve coref -------------------------

TP! -> TP_resolve_coref(V_CPobj_resolve_coref, DP_s, TP_coref) [0.5]
[string] *(*(?2, *(?1, *(that, ?3))), *(",", ?2))
[graph] APP_coref(APP_obj(?1, ?3), ?2)



// --------------------------------- non-final TP --------------------------------------

// combine subject with downstairs verbs
TP_coref -> TP_tr(Vbar_coref, DP) [0.1]
[string] *(?2, ?1)
[graph] APP_subj(?1, ?2)

// recursion
TP_coref -> TP_CP_coref(V_CPobj_coref, DP, TP_coref) [0.9]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)


// ---------------------------- "downstairs" Verbs ------------------------------


// coref
// argument added to string but not graph (pronouns only)
// graph has coref source

// her
Vbar_coref -> liked_her [0.5]
[string] *(liked, her)
[graph] '(r<root> / like-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'

Vbar_coref -> hated_her [0.5]
[string] *(hated, her)
[graph] '(r<root> / hate-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'

Vbar_coref -> saw_her [0.5]
[string] *(saw, her)
[graph] '(r<root> / see-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'

Vbar_coref -> amused_her [0.5]
[string] *(amused, her)
[graph] '(r<root> / amuse-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'

//him
Vbar_coref -> liked_him [0.5]
[string] *(liked, him)
[graph] '(r<root> / like-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'

Vbar_coref -> hated_him [0.5]
[string] *(hated, him)
[graph] '(r<root> / hate-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'

Vbar_coref -> saw_him [0.5]
[string] *(saw, him)
[graph] '(r<root> / see-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'

Vbar_coref -> amused_him [0.5]
[string] *(amused, him)
[graph] '(r<root> / amuse-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'


//--------------------------------- verbs with CP object -----------------------------------------

// no coref
V_CPobj -> thought [0.5]
[string] thought
[graph] '(r<root> / think-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> said [0.5]
[string] said
[graph] '(r<root> / say-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> believed [0.5]
[string] believed
[graph] '(r<root> / believe-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> knew [0.5]
[string] knew
[graph] '(r<root> / know-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> heard [0.5]
[string] heard
[graph] '(r<root> / hear-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> mentioned [0.5]
[string] mentioned
[graph] '(r<root> / mention-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'


// verbs that pass coref up
V_CPobj_coref -> thought_coref [0.5]
[string] thought
[graph] '(r<root> / think-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj(coref()))'

V_CPobj_coref -> said_coref [0.5]
[string] said
[graph] '(r<root> / say-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj(coref()))'

V_CPobj_coref -> believed_coref [0.5]
[string] believed
[graph] '(r<root> / believe-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj(coref()))'

V_CPobj_coref -> knew_coref [0.5]
[string] knew
[graph] '(r<root> / know-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj(coref()))'

V_CPobj_coref -> heard_coref [0.5]
[string] heard
[graph] '(r<root> / hear-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj(coref()))'

V_CPobj_coref -> mentioned_coref [0.5]
[string] mentioned
[graph] '(r<root> / mention-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj(coref()))'


// verbs that resolve coref
V_CPobj_resolve_coref -> thought_resolve_coref [0.5]
[string] thought
[graph] '(r<root> / think-01 :ARG0 (s<coref>) :ARG1 (o<obj>))--TYPE--(coref(), obj(coref()))'

V_CPobj_resolve_coref -> said_resolve_coref [0.5]
[string] said
[graph] '(r<root> / say-01 :ARG0 (s<coref>) :ARG1 (o<obj>))--TYPE--(coref(), obj(coref()))'

V_CPobj_resolve_coref -> believed_resolve_coref [0.5]
[string] believed
[graph] '(r<root> / believe-01 :ARG0 (s<coref>) :ARG1 (o<obj>))--TYPE--(coref(), obj(coref()))'

V_CPobj_resolve_coref -> knew_resolve_coref [0.5]
[string] knew
[graph] '(r<root> / know-01 :ARG0 (s<coref>) :ARG1 (o<obj>))--TYPE--(coref(), obj(coref()))'

V_CPobj_resolve_coref -> heard_resolve_coref [0.5]
[string] heard
[graph] '(r<root> / hear-01 :ARG0 (s<coref>) :ARG1 (o<obj>))--TYPE--(coref(), obj(coref()))'

V_CPobj_resolve_coref -> mentioned_resolve_coref [0.5]
[string] mentioned
[graph] '(r<root> / mention-01 :ARG0 (s<coref>) :ARG1 (o<obj>))--TYPE--(coref(), obj(coref()))'


// -------------------------------- pronouns -----------------------------------


DP -> we  [1.0]
[string] we
[graph] '(r<root> / we)--TYPE--()'

DP -> I  [1.0]
[string] I
[graph] '(r<root> / i)--TYPE--()'

DP -> you  [1.0]
[string] you
[graph] '(r<root> / you)--TYPE--()'


// -------------------------------- plural Nouns --------------------------------


DP -> kids [1.0]
[string] *(the, kids)
[graph] '(r<root> / kid)--TYPE--()'

DP -> girls [1.0]
[string] *(the, girls)
[graph] '(r<root> / girl)--TYPE--()'

DP -> boys [1.0]
[string] *(the, boys)
[graph] '(r<root> / boy)--TYPE--()'


// ------------------ singular nouns -------------------------

DP -> make_singular(DP_s) [1.0]
[string] ?1
[graph] ?1

DP_s -> doctor [1.0]
[string] *(the, doctor)
[graph] '(d<root> / doctor)'

DP_s -> astronaut [1.0]
[string] *(the, astronaut)
[graph] '(a<root> / astronaut)'

DP_s -> lawyer [1.0]
[string] *(the, lawyer)
[graph] '(m<root> / lawyer)'

DP_s -> soldier [1.0]
[string] *(the, soldier)
[graph] '(s<root> / soldier)'
