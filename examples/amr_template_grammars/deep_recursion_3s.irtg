interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation graph: de.up.ling.irtg.algebra.graph.ApplyModifyGraphAlgebra

// The doctor heard that..... the boys liked her, the doctor

// ------------------------------ Final states -----------------------------------------------

TP! -> TP_CP(V_CPobj, DP, TP)  [0.9]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)


// downstairs TP

TP! -> TP_intr(Vintr, DP) [0.1]
[string] *(?2, ?1)
[graph] APP_subj(?1, ?2)


// ---------------------- Downstairs Vbar with coref --------------------

Vbar_coref -> liked_her [0.5]
[string] *(liked, *(her, ?2)
[graph] '(r<root> / like-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'

Vbar_doctor_coref -> vbar_doctor_coref(Vbar_coref, doctor) [1.0]
[string] *(*(?1, ','), ?2)
[graph] APP_obj(?1, ?2)


//TODO more verbs and people including intr below


// ----------------intr ---------------



Vintr -> left [0.5]
[string] left
[graph] '(r<root> / leave-01 :ARG0 (s<subj>))--TYPE--(subj)'

Vintr -> slept [0.5]
[string] slept
[graph] '(r<root> / sleep-01 :ARG0 (s<subj>))--TYPE--(subj)'

Vintr -> arrived [0.5]
[string] arrived
[graph] '(r<root> / arrive-01 :ARG1 (s<subj>))--TYPE--(subj)'

Vintr -> won [0.5]
[string] won
[graph] '(r<root> / win-01 :ARG0 (s<subj>))--TYPE--(subj)'


//--------------------------------- verbs with CP object -----------------------------------------
V_CPobj -> thought [0.5]
[string] thought
[graph] '(r<root> / think-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> said [0.5]
[string] said
[graph] '(r<root> / say-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> believed [0.5]
[string] believed
[graph] '(r<root> / believe-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> knew [0.5]
[string] knew
[graph] '(r<root> / know-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> heard [0.5]
[string] heard
[graph] '(r<root> / hear-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> mentioned [0.5]
[string] mentioned
[graph] '(r<root> / mention-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'


// ------------------ singular nouns -------------------------


// ---- doctor --------

doctor -> doctor [1.0]
[string] *(the, doctor)
[graph] '(d<root> / doctor)'

DP_not_doctor -> astronaut [1.0]
[string] *(the, astronaut)
[graph] '(a<root> / astronaut)'

DP_not_doctor -> mechanic [1.0]
[string] *(the, mechanic)
[graph] '(m<root> / mechanic)'

DP_not_doctor -> soldier [1.0]
[string] *(the, soldier)
[graph] '(s<root> / soldier)'


// ----------- astronaut -----------

astronaut -> astronaut [1.0]
[string] *(the, astronaut)
[graph] '(a<root> / astronaut)'

DP_not_astronaut -> mechanic [1.0]
[string] *(the, mechanic)
[graph] '(m<root> / mechanic)'

DP_not_astronaut -> soldier [1.0]
[string] *(the, soldier)
[graph] '(s<root> / soldier)'

DP_not_astronaut -> doctor [1.0]
[string] *(the, doctor)
[graph] '(d<root> / doctor)'




// TODO etc
astronaut -> astronaut [1.0]
[string] *(the, astronaut)
[graph] '(a<root> / astronaut)'

mechanic -> mechanic [1.0]
[string] *(the, mechanic)
[graph] '(m<root> / mechanic)'

soldier -> soldier [1.0]
[string] *(the, soldier)
[graph] '(s<root> / soldier)'




// -------------------------------- pronouns -----------------------------------


DP -> we  [1.0]
[string] we
[graph] '(r<root> / we)--TYPE--()'

DP -> I  [1.0]
[string] I
[graph] '(r<root> / i)--TYPE--()'

DP -> you  [1.0]
[string] you
[graph] '(r<root> / you)--TYPE--()'



// -------------------------------- plural Nouns --------------------------------


DP -> kids [1.0]
[string] *(the, kids)
[graph] '(r<root> / kid)--TYPE--()'

DP -> girls [1.0]
[string] *(the, girls)
[graph] '(r<root> / girl)--TYPE--()'

DP -> boys [1.0]
[string] *(the, boys)
[graph] '(r<root> / boy)--TYPE--()'

DP -> men [1.0]
[string] *(the, men)
[graph] '(r<root> / man)--TYPE--()'

DP -> women [1.0]
[string] *(the, women)
[graph] '(r<root> / woman)--TYPE--()'
