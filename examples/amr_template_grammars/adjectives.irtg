interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation graph: de.up.ling.irtg.algebra.graph.ApplyModifyGraphAlgebra

// up to 5 (6) ordered adjective in an indefinite DP
// a opinion size age (shape) colour material N
// shape is in parentheses because I've commented out the only real one as I don't like the way it sounds in these sentences
// every adjective level is optional, implemented as "syntactic glue" unary rules


// ---------- DPs -------------------

DP! -> DP(NP_opinion) [1.0]
[string] *(a, ?1)
[graph] ?1


// ---------- modified NPs ------------

// OPINION
NP_opinion -> NP_opinion(NP_size, A_opinion) [1.0]
[string] *(?2, ?1)
[graph] MOD_m(?1, ?2)

// syntactic glue
NP_opinion -> NP_opinion_null(NP_size) [1.0]
[string] ?1
[graph] ?1

// SIZE
NP_size -> NP_size(NP_age, A_size) [1.0]
[string] *(?2, ?1)
[graph] MOD_m(?1, ?2)

// syntactic glue
NP_size -> NP_size_null(NP_age) [1.0]
[string] ?1
[graph] ?1

// AGE
NP_age -> NP_age(NP_shape, A_age) [1.0]
[string] *(?2, ?1)
[graph] MOD_m(?1, ?2)

// syntactic glue
NP_age -> NP_age_null(NP_shape) [1.0]
[string] ?1
[graph] ?1

// SHAPE
//NP_shape -> NP_shape(NP_colour, A_shape) [1.0]
//[string] *(?2, ?1)
//[graph] MOD_m(?1, ?2)

// syntactic glue
NP_shape -> NP_shape_null(NP_colour) [1.0]
[string] ?1
[graph] ?1

// COLOUR
NP_colour -> NP_colour(NP_material, A_colour) [1.0]
[string] *(?2, ?1)
[graph] MOD_m(?1, ?2)

// syntactic glue
NP_colour -> NP_colour_null(NP_material) [1.0]
[string] ?1
[graph] ?1

// MATERIAL
NP_material -> NP_material(N, A_material) [1.0]
[string] *(?2, ?1)
[graph] MOD_m(?1, ?2)

// syntactic glue
NP_material -> NP_material_null(N) [1.0]
[string] ?1
[graph] ?1


// -----------Adjectives ------------------

A_opinion -> beautiful [1.0]
[string] beautiful
[graph] '(r<root> / beautiful :mod-of (m<m>))--TYPE--(m)'

A_opinion -> strange [1.0]
[string] strange
[graph] '(r<root> / strange :mod-of (m<m>))--TYPE--(m)'

A_size -> long [1.0]
[string] long
[graph] '(r<root> / long :mod-of (m<m>))--TYPE--(m)'

A_size -> short [1.0]
[string] short
[graph] '(r<root> / short :mod-of (m<m>))--TYPE--(m)'

A_age -> new [1.0]
[string] new
[graph] '(r<root> / new :mod-of (m<m>))--TYPE--(m)'

A_age -> antique [1.0]
[string] antique
[graph] '(r<root> / antique :mod-of (m<m>))--TYPE--(m)'

A_shape -> round [1.0]
[string] round
[graph] '(r<root> / round :mod-of (m<m>))--TYPE--(m)'

A_colour -> green [1.0]
[string] green
[graph] '(r<root> / green :mod-of (m<m>))--TYPE--(m)'

A_colour -> blue [1.0]
[string] blue
[graph] '(r<root> / blue :mod-of (m<m>))--TYPE--(m)'

A_material -> silk [1.0]
[string] silk
[graph] '(r<root> / silk :mod-of (m<m>))--TYPE--(m)'


// -------- Nouns -------------------

N -> skirt [1.0]
[string] skirt
[graph] '(r<root> / skirt)--TYPE--()'

N -> curtain [1.0]
[string] curtain
[graph] '(r<root> / curtain)--TYPE--()'

