interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation graph: de.up.ling.irtg.algebra.graph.ApplyModifyGraphAlgebra

// COREF doesn't seem to work so I've implemented it as a normal source, in the type system


// ------------------------------ Final states -----------------------------------------------


// 3f
// resolve coref
TP_deep_coref_3f! -> TP_coref_3f(V_CPobj_resolve_coref, Nom3f, TP_coref_3f) [1.0]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_coref(APP_obj(?1, ?3), ?2)

// move coreferent subject deeper
TP_deep_coref_3f! -> TP_coref_3f_within(V_CPobj, DP_plural, TP_deep_coref_3f) [1.0]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)

// you
// resolve coref
TP_deep_coref_2! -> TP_coref_2(V_CPobj_resolve_coref, You, TP_coref_2) [1.0]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_coref(APP_obj(?1, ?3), ?2)

// move coreferent subject deeper
TP_deep_coref_2! -> TP_coref_2_within(V_CPobj, DP_plural, TP_deep_coref_2) [1.0]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)

// 3m
// resolve coref
TP_deep_coref_3m! -> TP_coref_3m(V_CPobj_resolve_coref, Nom3m, TP_coref_3m) [1.0]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_coref(APP_obj(?1, ?3), ?2)

// move coreferent subject deeper
TP_deep_coref_3m! -> TP_coref_3m_within(V_CPobj, DP_plural, TP_deep_coref_3m) [1.0]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)



// --------------------------------- non-final TP --------------------------------------

// track the phi features of the coref pronoun
// other DPs are full DPs to prevent irrelevant node merging
// intransitive unary rule for consistency

// -------- 3f -----------
// Intransitive
TP_coref_3f -> TP_intr_3f(VP_coref_3f) [1.0]
[string] ?1
[graph] ?1

// Transitive: Subject must disagree on phi features
TP_coref_3f -> TP_tr_3f(Vbar_coref_3f, DP_plural) [1.0]
[string] *(?2, ?1)
[graph] APP_subj(?1, ?2)

// with CP object (recursion)
TP_coref_3f -> TP_CP_3f(V_CPobj_coref, DP_plural, TP_coref_3f) [1.0]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)


// ----- you ---------
// Intransitive
TP_coref_2 -> TP_intr_3f(VP_coref_2) [1.0]
[string] ?1
[graph] ?1

// Transitive: Subject must disagree on phi features
TP_coref_2 -> TP_tr_3f(Vbar_coref_2, DP_plural) [1.0]
[string] *(?2, ?1)
[graph] APP_subj(?1, ?2)

TP_coref_2 -> TP_CP_2(V_CPobj_coref, DP_plural, TP_coref_2) [1.0]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)

// 3m
// Intransitive
TP_coref_3m -> TP_intr_3m(VP_coref_3m) [1.0]
[string] ?1
[graph] ?1

// Transitive: Subject must disagree on phi features
TP_coref_3m -> TP_tr_3m(Vbar_coref_3m, DP_plural) [1.0]
[string] *(?2, ?1)
[graph] APP_subj(?1, ?2)

TP_coref_3m -> TP_CP_3m(V_CPobj_coref, DP_plural, TP_coref_3m) [1.0]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)





// --------------------------------- "downstairs" verbs ---------------------------------------


// 3 fem
VP_coref_3f -> she_slept [1.0]
[string] *(she, slept)
[graph] '(r<root> / sleep-01 :ARG0 (s<coref>))--TYPE--(coref())'

Vbar_coref_3f -> liked_her [1.0]
[string] *(liked, her)
[graph] '(r<root> / like-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'

// you
VP_coref_2 -> you_slept [1.0]
[string] *(you, slept)
[graph] '(r<root> / sleep-01 :ARG0 (s<coref>))--TYPE--(coref())'

Vbar_coref_2 -> liked_you [1.0]
[string] *(liked, you)
[graph] '(r<root> / like-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'

// 3 masc
VP_coref_3m -> he_slept [1.0]
[string] *(he, slept)
[graph] '(r<root> / sleep-01 :ARG0 (s<coref>))--TYPE--(coref())'

Vbar_coref_3m -> liked_him [1.0]
[string] *(liked, him)
[graph] '(r<root> / like-01 :ARG0 (s<subj>) :ARG1 (o<coref>))--TYPE--(subj(), coref())'



//---------------------------------verbs with CP object-------------------------------------------------

// no coref
V_CPobj -> thought [1.0]
[string] thought
[graph] '(r<root> / think-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> said [1.0]
[string] said
[graph] '(r<root> / say-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'


// passes coref up
V_CPobj_coref -> thought_coref [1.0]
[string] thought
[graph] '(r<root> / think-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj(coref()))'

V_CPobj_coref -> said_coref [1.0]
[string] said
[graph] '(r<root> / say-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj(coref()))'


// resolves coref
V_CPobj_resolve_coref -> thought_resolve_coref [1.0]
[string] thought
[graph] '(r<root> / think-01 :ARG0 (s<coref>) :ARG1 (o<obj>))--TYPE--(coref(), obj(coref()))'

V_CPobj_resolve_coref -> announced_resolve_coref [1.0]
[string] announced
[graph] '(r<root> / announce-01 :ARG0 (s<coref>) :ARG1 (o<obj>))--TYPE--(coref(), obj(coref()))'


// -------------------------------- pronouns ------------------------------------------------------
// named by agreement: Nominative/Accusative person singular/plural/masculine/feminine/neuter


Nom3f -> she [1.0]
[string] she
[graph] '(r<root> / she)--TYPE--()'

You -> you [1.0]
[string] you
[graph] '(r<root> / you)--TYPE--()'

Nom3m -> he [1.0]
[string] he
[graph] '(r<root> / he)--TYPE--()'


// --------------------------------Nouns --------------------------------


// TODO are these teach-person graphs?
DP_plural -> teachers [1.0]
[string] *(the, teachers)
[graph] '(r<root> / teacher)--TYPE--()'

DP_plural -> students [1.0]
[string] *(the, students)
[graph] '(r<root> / student)--TYPE--()'




// ------------------------OBSOLETE -----------------------------------

// it's either COREF_0 or MARKER_0 I think
//Nom3f_coref -> she_coref [1.0]
//[string] she
//[graph] '(r<root, coref> / she)--TYPE--(coref())'

//Acc3f_coref -> her_coref [1.0]
//[string] her
//[graph] '(r<root, coref>)--TYPE--(coref())'


// Transitive: Subject must disagree on phi features
//TP_coref_3f -> TP_tr_3fAcc(Vtr, DP_plural, Acc3f_coref) [1.0]
//[string] *(?2, *(?1, ?3))
//[graph] APP_subj(APP_obj(?1, ?3), ?2)


// past tense so there's null agreement
// general doesn't seem to work with coref

//Vintr -> slept [1.0]
//[string] slept
//[graph] '(r<root> / sleep-01 :ARG0 (s<subj>))--TYPE--(subj())'

//Vtr -> liked [1.0]
//[string] liked
//[graph] '(r<root> / like-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'
