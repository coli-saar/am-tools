interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation graph: de.up.ling.irtg.algebra.graph.ApplyModifyGraphAlgebra

// FIltering: to avoid centre embedding, only allow one subj_rel per sentence
// TODO add more NPs
// this is ONLY relative clauses with CPs inside them pushing the relative pronoun away from its verb
// BUT it includes RCs in object NPs as well (close in tree)

// ------------------------------ Final states -----------------------------------------------

// ------------ No coreference ----------------------

TP! -> TP_3p(V_CPobj, DP_plural, TP)  [0.2]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)

TP! -> TP_1s(V_CPobj, I, TP)  [0.2]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)

TP! -> TP_1p(V_CPobj, We, TP)  [0.2]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)

TP! -> TP_2(V_CPobj, You, TP)  [0.2]
[string] *(?2, *(?1, *(that, ?3)))
[graph] APP_subj(APP_obj(?1, ?3), ?2)

// Downstairs TPs
// 3rd plural only
TP! -> TP_tr(Vtr, DP_plural, DP_plural)  [0.1]
[string] *(?3, *(?1, ?2))
[graph] APP_subj(APP_obj(?1, ?2), ?3)

TP! -> TP_intr(Vintr, DP_plural) [0.1]
[string] *(?2, ?1)
[graph] APP_subj(?1, ?2)



// ---------------------------NPs and DPs --------------------------------

NP_plural -> NP_unary(N_plural) [0.5]
[string] ?1
[graph] ?1

DP_plural -> DP_plural_the(NP_plural) [0.25]
[string] *(the, ?1)
[graph] ?1



// ---- Relatives ----

RC -> subj_rel(CP_gap, Vintr) [1.0]
[string] *(who, *(?1, *("", ?2)))
[graph] MOD_obj(?2, ?1)

// -------- NP with RC -------------

NP_plural -> DP_RC(N_plural, RC) [0.25]
[string] *(?1, ?2)
[graph] MOD_subj(?1, ?2)


// the girls thought _
CP_gap -> CP_with_gap_base(V_CPobj, DP_plural) [0.5]
[string] *(?2, ?1)
[graph] APP_subj(?1, ?2)


// weird recusion with mod like in TAGs
CP_gap -> CP_with_gap_recursive(CP_gap, CP_gap) [0.5]
[string] *(?2, *(that, ?1))
[graph] MOD_obj(?1, ?2)



// ---------------------------- "downstairs" Verbs ------------------------------


// verbs with no co-ref
// 3rd plural only

Vtr -> liked [1.0]
[string] liked
[graph] '(r<root> / like-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

Vintr -> left [0.5]
[string] left
[graph] '(r<root> / leave-01 :ARG0 (s<subj>))--TYPE--(subj)'

Vintr -> slept [0.5]
[string] slept
[graph] '(r<root> / sleep-01 :ARG0 (s<subj>))--TYPE--(subj)'


//--------------------------------- verbs with CP object -----------------------------------------

// no coref
V_CPobj -> thought [0.5]
[string] thought
[graph] '(r<root> / think-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'

V_CPobj -> said [0.5]
[string] said
[graph] '(r<root> / say-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj())'


// passes coref up
V_CPobj_coref -> thought_coref [0.5]
[string] thought
[graph] '(r<root> / think-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj(coref()))'

V_CPobj_coref -> said_coref [0.5]
[string] said
[graph] '(r<root> / say-01 :ARG0 (s<subj>) :ARG1 (o<obj>))--TYPE--(subj(), obj(coref()))'


// resolves coref
V_CPobj_resolve_coref -> thought_resolve_coref [0.5]
[string] thought
[graph] '(r<root> / think-01 :ARG0 (s<coref>) :ARG1 (o<obj>))--TYPE--(coref(), obj(coref()))'

V_CPobj_resolve_coref -> announced_resolve_coref [0.5]
[string] announced
[graph] '(r<root> / announce-01 :ARG0 (s<coref>) :ARG1 (o<obj>))--TYPE--(coref(), obj(coref()))'


// --------------------------------Nouns --------------------------------


N_plural -> kids [0.25]
[string] kids
[graph] '(r<root> / kid)--TYPE--()'

N_plural -> girls [0.25]
[string] girls
[graph] '(r<root> / girl)--TYPE--()'

N_plural -> boys [0.25]
[string] boys
[graph] '(r<root> / boy)--TYPE--()'

// -------------------------------- pronouns -----------------------------------


We -> we  [1.0]
[string] we
[graph] '(r<root> / we)--TYPE--()'

I -> I  [1.0]
[string] I
[graph] '(r<root> / i)--TYPE--()'

You -> you  [1.0]
[string] you
[graph] '(r<root> / you)--TYPE--()'

