plugins {
    id 'java'
    id 'java-library'
    id 'groovy'
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id 'application'
    id "com.peterabeles.gversion" version "1.5.0" //can retrieve git version from within code
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

mainClassName = 'de.saar.coli.amtools.astar.Astar'

//to make sure we always use UTF-8 (see https://gist.github.com/rponte/d660919434d094bbd35a1aabf7ef1bf0), otherwise I got errors on Windows -- JG
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
javadoc.options.encoding = 'UTF-8'

application {
    applicationDefaultJvmArgs = ['-ea']
}

shadowJar {
  zip64 true
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        url 'http://cogcomp.org/m2repo/'
        allowInsecureProtocol = true
    }
    maven {url 'https://raw.github.com/coli-saar/alto/repository/'}
}

gversion {
  srcDir       = "src/main/java/"           
  classPackage = "de.saar.coli.amrtagging"
  className    = "AMToolsVersion"              
  dateFormat   = "yyyy-MM-dd'T'HH:mm:ss'Z'" // optional. This is the default
  timeZone     = "UTC"                      // optional. UTC is default
  debug        = false                      // optional. print out extra debug information
  language     = "java"                     // optional. Can be Java or Kotlin, case insensitive
  explicitType = false                      // optional. Force types to be explicitly printed
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

project.compileJava.dependsOn(createVersionFile)
dependencies {
    implementation 'com.github.coli-saar:alto:2.3.7'

    implementation 'com.github.semantic-dependency-parsing:toolkit:v2.0-alpha'

    implementation 'me.tongfei:progressbar:0.7.2'
    implementation 'edu.stanford.nlp:stanford-corenlp:3.9.2' //need this as well - ML
    implementation 'edu.stanford.nlp:stanford-corenlp:3.9.2:models' // the ":models" ensures that the trained models are downloaded too

    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.10'
    //testCompile 'org.codehaus.groovy:groovy-all:2.4.13'

    // the following dependencies are in alto, but we need to include them here again
    // (this stuff seems to not be recursive)
    // (doesn't it? it seems to work fine without the dependencies - AK)
    // (for me it does - ML)
    implementation 'com.beust:jcommander:1.69'
    implementation 'net.sf.jgrapht:jgrapht:0.8.3'
    implementation 'edu.mit:jwi:2.2.3'
    implementation 'org.apache.ant:ant:1.10.12'
    
    // Illinois NER https://cogcomp.org/page/software_view/NETagger
    implementation 'edu.illinois.cs.cogcomp:illinois-tokenizer:4.0.13'
    implementation 'edu.illinois.cs.cogcomp:illinois-ner:4.0.13'
    
    implementation 'com.owlike:genson:1.5'
    implementation group: 'com.opencsv', name: 'opencsv', version: '5.1'
    implementation 'de.ruedigermoeller:fst:2.56' // faster serialization
}

//for debugging, works e.g. in NetBeans. You can change the main class and the arguments here --JG
//task debug(dependsOn: classes, type: JavaExec) {
//    main = "de.saar.coli.amrtagging.Parser2ExtFormat"
//    classpath = sourceSets.main.runtimeClasspath
//    standardInput = System.in
//    args '-c', '/Users/jonas/Documents/experimentData/astar_replication_2019/toy/evalInput.corpus', '-p', '/Users/jonas/Documents/experimentData/astar_replication_2019/toy/', '-rep', 'false', '--shift'
//    ignoreExitValue = true
//    debug = true
//}

